generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  clerkUserId  String?       @unique
  zadarmaId    String?
  email        String        @unique
  phone        String?
  name         String?
  username     String?
  role         String        @default("user")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bonuses      Bonus[]
  comments     Comment[]
  referee      Referral[]    @relation("Referee")
  referrals    Referral[]    @relation("Referrer")
  reservations Reservation[]
  sources      UserSource[]
}

model Reservation {
  id             String               @id @default(cuid())
  userId         String
  address        String
  serviceName    String
  contactInfo    String
  additionalInfo String?
  promoCode      String?
  startTime      DateTime
  endTime        DateTime
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  user           User                 @relation(fields: [userId], references: [id])
  services       ServiceReservation[] @relation("ReservationServices")
}

model Service {
  id                 String               @id @default(cuid())
  name               String
  description        String?
  duration           Int
  price              Float
  additionalServices AdditionalServices[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  reservations       ServiceReservation[]
}

model AdditionalServices {
  id          String   @id @default(cuid())
  service     Service? @relation(fields: [serviceId], references: [id])
  serviceId   String?
  name        String
  price       Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PromoCode {
  id         String    @id @default(cuid())
  code       String    @unique
  type       String
  value      Float
  maxUses    Int?
  uses       Int       @default(0)
  validUntil DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Referral {
  id          String   @id @default(cuid())
  referrerId  String
  refereeId   String
  level       Int      @default(1)
  bonusAmount Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  referee     User     @relation("Referee", fields: [refereeId], references: [id])
  referrer    User     @relation("Referrer", fields: [referrerId], references: [id])
}

model Bonus {
  id        String    @id @default(cuid())
  userId    String
  amount    Float
  type      String
  source    String?
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  service   String
  text      String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model UserSource {
  id        String   @id @default(cuid())
  userId    String
  source    String
  campaign  String?
  medium    String?
  term      String?
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model ServiceReservation {
  id            String      @id @default(cuid())
  reservationId String
  serviceId     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  reservation   Reservation @relation("ReservationServices", fields: [reservationId], references: [id], onDelete: Cascade)
  service       Service     @relation(fields: [serviceId], references: [id])
}

model Calendar {
  id        String            @id @default(cuid())
  timeGap   Int
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  days      DayAvailability[]
}

model DayAvailability {
  id             String    @id @default(uuid())
  availabilityId String
  day            DayOfWeek
  startTime      DateTime
  endTime        DateTime
  availability   Calendar  @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
