'use server'

import { db } from '@/lib/prisma'
import { auth } from '@clerk/nextjs/server'
import { DateTime } from 'luxon'

const TIMEZONE = 'Europe/Warsaw'

export async function createReservation(bookingData) {
	try {
		const user = await auth()

		const idUser = await db.user.findUnique({
			where: { clerkUserId: user.userId },
		})

		const booking = await db.reservation.create({
			data: {
				userId: idUser.id,
				address: bookingData.address,
				serviceName: bookingData.service,
				additionalInfo: bookingData.comment,
				contactInfo: bookingData.contacts,
				promoCode: bookingData.promocode,
				startTime: bookingData.startTime,
				endTime: bookingData.endTime,
			},
		})

		if (bookingData.services?.length > 0) {
			await db.serviceReservation.createMany({
				data: bookingData.services.map(service => ({
					reservationId: booking.id,
					serviceId: service, // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `Service`
				})),
			})
		}

		const updatedBooking = await db.reservation.findUnique({
			where: { id: booking.id },
			include: { services: true }, // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
		})

		return { success: true, updatedBooking }
	} catch (error) {
		console.log(error.message)

		return { success: false, error: error.message }
	}
}

export async function getFutureReservations() {
	try {
		const user = await auth()
		if (!user) {
			throw new Error('Unauthorized')
		}

		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ —Å–µ—Ä–≤–µ—Ä–∞
		const now = DateTime.now().toJSDate()

		// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
		const reservations = await db.reservation.findMany({
			where: {
				startTime: {
					gt: now, // –ó–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏—Ö —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π
				},
			},
			orderBy: {
				startTime: 'asc', // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
			},
			include: { services: true },
		})

		return { success: true, reservations }
	} catch (error) {
		console.error('Error fetching future reservations:', error)
		return { success: false, error: error.message }
	}
}

export async function getPastReservations() {
	try {
		const user = await auth()
		if (!user) {
			throw new Error('Unauthorized')
		}

		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
		const now = DateTime.now().toJSDate()

		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
		const reservations = await db.reservation.findMany({
			where: {
				endTime: {
					lt: now, // –ó–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π
				},
			},
			orderBy: {
				startTime: 'desc', // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —É–±—ã–≤–∞–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
			},
			include: { services: true },
		})

		return { success: true, reservations }
	} catch (error) {
		console.error('Error fetching past reservations:', error)
		return { success: false, error: error.message }
	}
}

export async function getBooking() {
	try {
		// üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ë–î
		const bookings = await db.reservation.findMany({
			select: {
				startTime: true,
				endTime: true,
			},
		})

		// üîπ –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ `yyyy-MM-dd` –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
		const bookingsByDate = {}

		bookings.forEach(({ startTime, endTime }) => {
			// ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
			const localStart = DateTime.fromJSDate(startTime, { zone: TIMEZONE })
			const localEnd = DateTime.fromJSDate(endTime, { zone: TIMEZONE })

			const dateKey = localStart.toFormat('yyyy-MM-dd') // üìå –ö–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏

			if (!bookingsByDate[dateKey]) {
				bookingsByDate[dateKey] = []
			}

			// ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ `HH:mm` —Ñ–æ—Ä–º–∞—Ç–µ
			bookingsByDate[dateKey].push({
				start: localStart.toFormat('HH:mm'),
				end: localEnd.toFormat('HH:mm'),
			})
		})

		// console.log('üìå –ò—Ç–æ–≥–æ–≤—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', bookingsByDate)
		return bookingsByDate
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error.message)
		return {}
	}
}

export async function getBookingForDate(date) {
	try {
		// ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥–Ω—É—é –¥–∞—Ç—É –≤ `ISO` —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç `Date`
		const dateString =
			typeof date === 'string' ? date : DateTime.fromJSDate(date).toISODate()

		// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞—Ç—É
		if (!dateString) {
			throw new Error('Invalid date format')
		}

		// ‚úÖ –°–æ–∑–¥–∞—ë–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–Ω—è –≤ `UTC`
		const startOfDayUTC = DateTime.fromISO(dateString, { zone: TIMEZONE })
			.startOf('day')
			.toUTC()
			.toJSDate()
		const endOfDayUTC = DateTime.fromISO(dateString, { zone: TIMEZONE })
			.endOf('day')
			.toUTC()
			.toJSDate()

		// ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã
		const bookings = await db.reservation.findMany({
			where: {
				startTime: {
					gte: startOfDayUTC,
					lte: endOfDayUTC,
				},
			},
			select: {
				startTime: true,
				endTime: true,
			},
		})

		// ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ `{ start: 'HH:mm', end: 'HH:mm' }`
		const formattedBookings = bookings.map(({ startTime, endTime }) => ({
			start: DateTime.fromJSDate(startTime, { zone: TIMEZONE }).toFormat(
				'HH:mm'
			),
			end: DateTime.fromJSDate(endTime, { zone: TIMEZONE }).toFormat('HH:mm'),
		}))

		return formattedBookings
	} catch (error) {
		console.error(
			`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è ${date}:`,
			error.message
		)
		return []
	}
}

export const updateReservation = async updatedData => {
	try {
		const response = await fetch(`${process.env.URL}/api/update-reservation`, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify(updatedData),
		})

		if (!response.ok) {
			throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
		}

		return await response.json()
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error)
		return { success: false, error: error.message }
	}
}
