generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  clerkUserId  String?       @unique
  zadarmaId    String?
  email        String?       @unique
  phone        String?
  name         String?
  username     String?
  role         String        @default("user")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bonuses      Bonus[]
  comments     Comment[]
  referee      Referral[]    @relation("Referee")
  referrals    Referral[]    @relation("Referrer")
  reservations Reservation[]
  sources      UserSource[]
}

model Partner {
  id            String   @id @default(cuid())
  name          String
  code          String   @unique // что пойдёт в ?ref=
  commissionPct Float    @default(10) // процент партнёра, %
  createdAt     DateTime @default(now())
}

model ReferralHit {
  id          String   @id @default(cuid())
  partnerCode String
  visitorId   String
  day         String // 'YYYY-MM-DD'
  createdAt   DateTime @default(now())

  @@unique([partnerCode, visitorId, day]) // 1 хит/день/визитор/партнёр
}

model CallIntent {
  id          String   @id @default(cuid())
  partnerCode String
  visitorId   String?
  ua          String?
  createdAt   DateTime @default(now())

  @@index([partnerCode, createdAt])
}

model Lead {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  name        String
  phone       String
  serviceId   String
  serviceName String?
  selectedIds String[] @default([])

  partnerCode String? // кто привёл (из cookie)
  ua          String?
  ip          String?
  status      String  @default("new") // new | handled | spam | confirmed

  selectedNames String[] @default([])

  monthKey String?
}

model GoogleReviewsCache {
  id        String   @id @default("google") // один глобальный ряд
  payload   Json
  rating    Float?
  total     Int?
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id                      String               @id @default(cuid())
  userId                  String
  address                 String
  serviceName             String
  contactInfo             String
  additionalInfo          String?
  promoCode               String?
  zadarmaDealId           String?
  zadarmaTaskId           String?
  startTime               DateTime
  endTime                 DateTime
  price                   Float
  status                  String               @default("pending")
  serviceNameIds          String[]             @default([])
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  user                    User                 @relation(fields: [userId], references: [id])
  services                ServiceReservation[] @relation("ReservationServices")
  // атрибуция
  partnerCode             String?
  partnerCommissionAmount Float? // комиссия партнёру в zł (под твой float)
}

model Service {
  id                 String               @id @default(cuid())
  name               String
  description        String?
  duration           Int
  price              Float
  originalPrice      Float?
  additionalServices AdditionalServices[] @relation("serviceAdditional")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  reservations       ServiceReservation[]
}

model AdditionalServices {
  id          String   @id @default(cuid())
  service     Service? @relation("serviceAdditional", fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId   String?
  name        String
  price       Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PromoCode {
  id         String    @id @default(cuid())
  code       String    @unique
  type       String
  value      Float
  maxUses    Int?
  uses       Int       @default(0)
  validUntil DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Referral {
  id          String   @id @default(cuid())
  referrerId  String
  refereeId   String
  level       Int      @default(1)
  bonusAmount Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  referee     User     @relation("Referee", fields: [refereeId], references: [id])
  referrer    User     @relation("Referrer", fields: [referrerId], references: [id])
}

model Bonus {
  id        String    @id @default(cuid())
  userId    String
  amount    Float
  type      String
  source    String?
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  service   String
  text      String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model UserSource {
  id        String   @id @default(cuid())
  userId    String
  source    String
  campaign  String?
  medium    String?
  term      String?
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model ServiceReservation {
  id            String      @id @default(cuid())
  reservationId String
  serviceId     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  reservation   Reservation @relation("ReservationServices", fields: [reservationId], references: [id], onDelete: Cascade)
  service       Service     @relation(fields: [serviceId], references: [id])
}

model Calendar {
  id        String            @id @default(cuid())
  timeGap   Int
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  days      DayAvailability[]
}

model DayAvailability {
  id             String    @id @default(uuid())
  availabilityId String
  day            DayOfWeek
  startTime      DateTime
  endTime        DateTime
  availability   Calendar  @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
}

model SentNotification {
  id        String   @id @default(cuid())
  date      DateTime @unique
  createdAt DateTime @default(now())
}

model PushSubscription {
  id        String   @id @default(cuid())
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
